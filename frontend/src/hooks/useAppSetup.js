import { useEffect, useState, useCallback } from "react";
import axios from "axios";

let signOutSchedulerId;

function cancelScheduledSignOut() {
  clearTimeout(signOutSchedulerId);
  signOutSchedulerId = null;
  localStorage.removeItem("signOutDate");
}

function useAppSetup() {
  const [isDone, setIsDone] = useState(false);
  const [isSignedIn, setIsSignedIn] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");

  const signOut = useCallback(async () => {
    const response = await axios.delete("/sessions");

    axios.defaults.headers.post["X-CSRF-Token"] = response.data.csrfToken;
    cancelScheduledSignOut();
    setIsSignedIn(false);
    setShowAlert(true);
    setAlertMessage("You are signed out");
  }, []);

  const scheduleSignOut = useCallback(
    (signOutDate) => {
      /*
      signOutDate: a string generated by the backend by calling
      JSON.stringify() on a Date object.
      return: true if sign out is successfully scheduled else false
      */
      if (!signOutDate || new Date(signOutDate) < new Date()) {
        return false;
      }
      signOutSchedulerId = setTimeout(
        signOut,
        new Date(signOutDate).getTime() - Date.now()
      );
      return true;
    },
    [signOut]
  );

  useEffect(() => {
    const setupApp = async () => {
      /*
      1. get csrf token
      2. determine whether user is signed in
      */
      const response = await axios.post("/csrfToken");

      axios.defaults.headers.post["X-CSRF-Token"] = response.data.csrfToken;

      try {
        await axios.post("/sessions");
      } catch (error) {
        if (error.response && error.response.status === 401) {
          setIsDone(true);
          return;
        }
        /*
        backend does not return other 4xx code other than 401.
        Therefore, any other error indicates a backend malfunctioning.
        */
        throw error;
      }

      const signOutDate = localStorage.getItem("signOutDate");
      const succeeded = scheduleSignOut(signOutDate);

      if (!succeeded) {
        setShowAlert(true);
        setAlertMessage(
          "Sorry, we are unable to resume your session. Please sign in again."
        );
        setIsDone(true);
        return;
      }

      setIsSignedIn(true);
      setIsDone(true);
    };

    setupApp();
  }, [scheduleSignOut]);

  return {
    isDone,
    isSignedIn,
    setIsSignedIn,
    signOut,
    scheduleSignOut,
    showAlert,
    setShowAlert,
    alertMessage,
    setAlertMessage,
  };
}

export { useAppSetup, cancelScheduledSignOut };
